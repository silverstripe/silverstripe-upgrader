{
    "mappings": {
        "ExampleField": "SilverStripe\\Fields\\ExampleField",
        "ExampleInterface": "SilverStripe\\Fields\\RenamedInterface",
        "MySpace\\SpaceClass": "SpaceClass",
        "ExampleNamespace\\NextExampleField": "SilverStripe\\Fields\\NextExampleField",
        "MySpace\\ExampleField3": "SilverStripe\\Fields\\RenamedExampleField3",
        "MySpace\\A": "MySpace\\Aye",
        "MySpace\\B": "MySpace\\Bee",
        "MySpace\\Traitor": "TraitSpace\\Traitee",
        "Exception": "MySpace\\NewException"
    }
}
------
<?php

namespace MySpace;

use SomeNamespace\SomeClass;
use OtherClass;
use ExampleField;
use ExampleInterface;
use ExampleNamespace\NextExampleField;
use Exception;

// Arbirtary whitespace differences should be preserved
class ExampleSubclass extends ExampleField implements ExampleInterface
{
    function fn(ExampleField $foo, ExampleInterface $bar, $baz) {
        if   ($baz instanceof ExampleInterface) {
            return true;
        }
        if(interface_exists('ExampleInterface')) return true;

        try {
            echo 'hello';
        } catch(Exception $e) {}
    }

    use Traitor;
}

interface RenamedInterface extends A, B {
}

trait Traitee {
}

ExampleField::doSomething();
new ExampleField();
new SomeClass();
NextExampleField::A_CONST === 5;
ExampleField3::$aStatic === 5;
new SpaceClass();


new OtherClass();
------
<?php

namespace MySpace;

use SomeNamespace\SomeClass;
use OtherClass;




use SilverStripe\Fields\ExampleField;
use SilverStripe\Fields\RenamedInterface;
use MySpace\NewException;
use TraitSpace\Traitee;
use MySpace\Aye;
use MySpace\Bee;
use SilverStripe\Fields\NextExampleField;
use SilverStripe\Fields\RenamedExampleField3;
use SpaceClass;


// Arbirtary whitespace differences should be preserved
class ExampleSubclass extends ExampleField implements RenamedInterface
{
    function fn(ExampleField $foo, RenamedInterface $bar, $baz) {
        if   ($baz instanceof RenamedInterface) {
            return true;
        }
        if(interface_exists(RenamedInterface::class)) return true;

        try {
            echo 'hello';
        } catch(NewException $e) {}
    }

    use Traitee;
}

interface RenamedInterface extends Aye, Bee {
}

trait Traitee {
}

ExampleField::doSomething();
new ExampleField();
new SomeClass();
NextExampleField::A_CONST === 5;
RenamedExampleField3::$aStatic === 5;
new SpaceClass();


new OtherClass();

<?php

namespace SilverStripe\Upgrader\CodeCollection;

/**
 * Represents a set of code changes and warnings.
 * Generated by an Upgrader, to be displayed with a ChangeDisplay or written to disk with a CodeCollection.
 */
class CodeChangeSet
{
    /**
     * List of changes for files.
     * Each change can represent content update or a file operation. The array is structure as such:
     * ```php
     * [
     *   'updatedFile.txt' => [
     *     'new' => 'framework',
     *     'old' => 'sapphire',
     *     'path' => false
     *   ],
     *   'brandNewFile.txt' => [
     *     'new' => 'framework',
     *     'old' => false,
     *     'path' => false
     *   ],
     *   'moveFileWithUpdatedContent.txt' => [
     *     'new' => 'framework',
     *     'old' => 'sapphire',
     *     'path' => 'newPath.txt
     *   ],
     *   'deletedFile.txt' => [
     *     'new' => false,
     *     'old' => 'sapphire'
     *   ],
     *   'moveFolder' => [
     *      'path' => 'newFolderPath'
     *   ],
     *
     * ]
     * ```
     *
     * @var array
     */
    private $fileChanges = [];

    private $warnings = [];

    private $affectedFiles = [];

    /**
     * Add a file change.
     *
     * @param string $path
     * @param string $contents New contents
     * @param string $original Original contents
     * @param false|string $newPath New location of the file.
     */
    public function addFileChange($path, $contents, $original, $newPath = false)
    {
        if (isset($this->fileChanges[$path])) {
            user_error("Already added changes for $path, shouldn't add a 2nd time");
        }

        $this->fileChanges[$path] = [
            'new' => $contents,
            'old' => $original
        ];

        if (!in_array($path, $this->affectedFiles)) {
            $this->affectedFiles[] = $path;
        }
    }

    /**
     * Move a file/folder to a different location within the project.
     * @todo Implement this
     * @param string $path
     */
    public function move(string $currentPath, string $newPath)
    {

    }

    /**
     * Remove a file from the project.
     * @todo Implement this
     * @param string $currentPath
     */
    public function remove(string $currentPath)
    {

    }

    /**
     * Add a warning about a given file.
     * Usually these warnings highlight upgrade activity that a developer will need to check for themselves
     *
     * @param string $path
     * @param int $line
     * @param string $warning
     */
    public function addWarning($path, $line, $warning)
    {
        if (!isset($this->warnings[$path])) {
            $this->warnings[$path] = [];
        }

        $this->warnings[$path][] = "<info>$path:$line</info> <comment>$warning</comment>";

        if (!in_array($path, $this->affectedFiles)) {
            $this->affectedFiles[] = $path;
        }
    }

    public function addWarnings($path, $warnings)
    {
        foreach ($warnings as $warning) {
            list($line, $message) = $warning;
            $this->addWarning($path, $line, $message);
        }
    }

    /**
     * Return all the file changes, as a map of path => array(new => '', old => '')
     *
     * @return array
     */
    public function allChanges()
    {
        return $this->fileChanges;
    }

    /**
     * Return all affected files, in the order that they were added to the CodeChangeSet
     * @return array
     */
    public function affectedFiles()
    {
        return $this->affectedFiles;
    }

    /**
     * Returns true if the given path has been altered in this change set
     * @param string $path
     * @return boolean
     */
    public function hasNewContents($path)
    {
        return isset($this->fileChanges[$path]);
    }

    /**
     * Returns true if the given path has warnings in this change set
     * @param string $path
     * @return boolean
     */
    public function hasWarnings($path)
    {
        return isset($this->warnings[$path]);
    }

    /**
     * Return the file contents for a given path
     *
     * @param string $path
     * @return string
     * @throws \InvalidArgumentException
     */
    public function newContents($path)
    {
        if (isset($this->fileChanges[$path])) {
            return $this->fileChanges[$path]['new'];
        } else {
            throw new \InvalidArgumentException("No file changes found for $path");
        }
    }

    /**
     * Return the prior file contents for a given path
     *
     * @param string $path
     * @return string
     * @throws \InvalidArgumentException
     */
    public function oldContents($path)
    {
        if (isset($this->fileChanges[$path])) {
            return $this->fileChanges[$path]['old'];
        } else {
            throw new \InvalidArgumentException("No file changes found for $path");
        }
    }

    /**
     * Return the warnings for a given path
     * @param string $path
     * @return array
     */
    public function warningsForPath($path)
    {
        if (isset($this->warnings[$path])) {
            return $this->warnings[$path];
        } else {
            throw new \InvalidArgumentException("No warnings found for $path");
        }
    }
}
